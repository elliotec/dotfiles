set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.mov,*.pdf,*.psd,*.aiset wildignore+=*.ppt,*.pptx,*.doc,*.docx,*.xls,*.xlsx" enable matchit plugin which ships with vim and enhances '%'runtime macros/matchit.vim,v
,V
 ,v
",v
set directory=~/.vim/tmp//set backupdir=~/.vim/tmp//" undo files and persistant undosset undofileset history=1000set undodir=~/Dropbox/dotfiles/.vim/tmp/undo/set undolevels=1000set undoreload=10000,v
let g:tmuxline_powerline_separators = 0" writing mode on markdown filesautocmd bufread,bufnewfile *.md,*.markdown setlocal spellautocmd bufread,bufnewfile *.md,*.markdown setlocal wrapautocmd bufread,bufnewfile *.md,*.markdown call litecorrect#init()autocmd bufread,bufnewfile *.md,*.markdown call pencil#init({'wrap': 'soft'})let g:vim_markdown_frontmatter = 1let g:vim_markdown_folding_level = 6function! s:goyo_enter()  silent !tmux set status off  Goyo 100x90%  Limelightendfunfunction! s:goyo_leave()  silent !tmux set status on  Limelight!endfunautocmd! User GoyoEnter nested call <SID>goyo_enter()autocmd! User GoyoLeave nested call <SID>goyo_leave()" This is to generate ctags in a project for code definition followmap <Leader>rt :!ctags --extra=+f -R *<CR><CR>,v
let g:tmuxline_powerline_separators = 0" writing mode on markdown filesautocmd bufread,bufnewfile *.md,*.markdown setlocal spellautocmd bufread,bufnewfile *.md,*.markdown setlocal wrapautocmd bufread,bufnewfile *.md,*.markdown call litecorrect#init()autocmd bufread,bufnewfile *.md,*.markdown call pencil#init({'wrap': 'soft'})let g:vim_markdown_frontmatter = 1let g:vim_markdown_folding_level = 6function! s:goyo_enter()  silent !tmux set status off  Goyo 100x90%  Limelightendfunfunction! s:goyo_leave()  silent !tmux set status on  Limelight!endfunautocmd! User GoyoEnter nested call <SID>goyo_enter()autocmd! User GoyoLeave nested call <SID>goyo_leave()" This is to generate ctags in a project for code definition followmap <Leader>rt :!ctags --extra=+f -R *<CR><CR>,v
let g:user_emmet_expandabbr_key = '<c-y>',v
let g:user_emmet_expandabbr_key = '<c-y>',V
" Swap lines up and downnnoremap <C-j> :m .+1<CR>==nnoremap <C-k> :m .-2<CR>==inoremap <C-j> <Esc>:m .+1<CR>==giinoremap <C-k> <Esc>:m .-2<CR>==givnoremap <C-j> :m '>+1<CR>gv=gvvnoremap <C-k> :m '<-2<CR>gv=gv" Easy buffer switchnmap <leader>l :bnext<CR>nmap <leader>h :bprevious<CR>" kill scratch buffer after selection is madeautocmd CursorMovedI * if pumvisible() == 0|pclose|endifautocmd InsertLeave * if pumvisible() == 0|pclose|endif"Destroy distractionsnnoremap <silent> <leader>z :Goyo<cr>,v
" Keep encoding utf-8set encoding=utf-8set fileencoding=utf-8" Backspace kills end of line and moves to previousset backspace=indent,eol,start" Keep buffers in the background when abandonedset hidden" ignore lots of filesset wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.mov,*.pdf,*.psd,*.aiset wildignore+=*.ppt,*.pptx,*.doc,*.docx,*.xls,*.xlsx" enable matchit plugin which ships with vim and enhances '%'runtime macros/matchit.vim" Show me what I'll doset showcmd" Enble autoread, some weird magic here that works well.set autoreadaugroup checktime    au!    if !has("gui_running")        autocmd BufEnter        * silent! checktime        autocmd CursorHold      * silent! checktime        autocmd CursorHoldI     * silent! checktime        autocmd CursorMoved     * silent! checktime        autocmd CursorMovedI    * silent! checktime        autocmd FocusGained     * silent! checktime    endifaugroup END" true term colors"set termguicolors" Use unix line endingsset fileformat=unix" always show status barset laststatus=2" only show status in status barset noshowmode" autoindent based on line aboveset autoindent" use spaces instead of tabs (noexpandtab for opposite)set expandtab" for makefilesautocmd FileType make set noexpandtab" tabs are 2 spaces while reading and insert modeset shiftwidth=2set softtabstop=2" size of a hard tabstopset tabstop=4" smarter indent for C-like languagesset smartindent" show tabs with dashes and trailing spaces with dotsset listchars=tab:--,trail:·set list" keep cursor visible within 8 lines while scrollingset scrolloff=8" Swaps and backups go in tmpset directory=~/.vim/tmp//set backupdir=~/.vim/tmp//" undo files and persistant undosset undofileset history=1000set undodir=~/Dropbox/dotfiles/.vim/tmp/undo/set undolevels=1000set undoreload=10000" Specify syntax on certain filetypesautocmd BufNewFile,BufRead *.md,*.markdown setlocal ft=markdownautocmd BufNewFile,BufRead *.less setlocal ft=lessautocmd BufNewFile,BufRead *.scss setlocal ft=scss" autocomplete words with spell checkset complete+=kspell" Remove trailing whitespace on savefunction! <SID>StripTrailingWhitespaces()    let l = line(".")    let c = col(".")    %s/\s\+$//e    call cursor(l, c)endfunautocmd BufWritePre * :call <SID>StripTrailingWhitespaces()" Set current colorscheme (from .vim/colors/)colorscheme molokai" Set space as map leaderlet mapleader = "\<Space>"" map jj to escinoremap jj <ESC>" clipboard bindingsset clipboard=unnamed" better ways to get to beginning and end of linennoremap H 0nnoremap L $" expand region visual by repeating v rather than +vmap v <Plug>(expand_region_expand)vmap <C-v> <Plug>(expand_region_shrink)" map ,ev to edit vimrcnnoremap <leader>ev :vsp $MYVIMRC<CR>" save with <leader>wnnoremap <leader>w :w<CR>" set vim-over command to leader fnnoremap <leader>f :OverCommandLine<CR>" toggle nerdtree with ctrl-omap <C-o> :NERDTreeToggle %:p:h<CR>" tab and shift-tab do proper thingvmap <Tab> >gvvmap <S-Tab> <gv" Make Y behave like other Capitals (C, D, etc.)noremap Y y$" rainbow parens always onau VimEnter * RainbowParenthesesToggleau Syntax * RainbowParenthesesLoadRoundau Syntax * RainbowParenthesesLoadSquareau Syntax * RainbowParenthesesLoadBraces" dictionary pathset dictionary="/usr/dict/words"" lightline settingslet g:lightline = {      \ 'colorscheme': 'wombat',      \ 'active': {      \   'left': [ [ 'mode', 'paste' ],      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],      \  'right': [ [ 'lineinfo' ],      \             [ 'percent' ],      \             [ 'filetype' ] ]      \ },      \ 'component': {      \   'readonly': '%{&readonly?"x":""}',      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'      \ },      \ 'component_visible_condition': {      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'      \ },      \ 'separator': { 'left': '', 'right': '' },      \ 'subseparator': { 'left': '|', 'right': '|' }      \ },V
let g:lightline = {      \ 'colorscheme': 'wombat',      \ 'active': {      \   'left': [ [ 'mode', 'paste' ],      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],      \  'right': [ [ 'lineinfo' ],      \             [ 'percent' ],      \             [ 'filetype' ] ]      \ },      \ 'component': {      \   'readonly': '%{&readonly?"x":""}',      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'      \ },      \ 'component_visible_condition': {      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'      \ },      \ 'separator': { 'left': '', 'right': '' },      \ 'subseparator': { 'left': '|', 'right': '|' }      \ }",v
let g:lightline = {      \ 'colorscheme': 'wombat',      \ 'active': {      \   'left': [ [ 'mode', 'paste' ],      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],      \  'right': [ [ 'lineinfo' ],      \             [ 'percent' ],      \             [ 'filetype' ] ]      \ },      \ 'component': {      \   'readonly': '%{&readonly?"x":""}',      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'      \ },      \ 'component_visible_condition': {      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'      \ },      \ 'separator': { 'left': '', 'right': '' },      \ 'subseparator': { 'left': '|', 'right': '|' }      \ }" Swap lines up and downnnoremap <C-j> :m .+1<CR>==nnoremap <C-k> :m .-2<CR>==inoremap <C-j> <Esc>:m .+1<CR>==giinoremap <C-k> <Esc>:m .-2<CR>==givnoremap <C-j> :m '>+1<CR>gv=gvvnoremap <C-k> :m '<-2<CR>gv=gv",v
	·,v
" Set current colorscheme (from .vim/colors/)colorscheme molokai" Set space as map leaderlet mapleader = "\<Space>"" map jj to escinoremap jj <ESC>,v
curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim,v
d,v
why ,v
are ,v
my ,v
colors ,v
weir,v
    - [Beautilist](http://beautilist.herokuapp.com),V
want ,v
!,v
t,v
i,v
k,v
a,v
e,v
r,v
b,v
',v
n,v
o,v
s,v
l,v
p,v
,,v
fragile ,v
so ,v
    - [Horizontal](http://howibecameawebdeveloper.com:8181) -- horizon/vue realtime chat, want to do other cool stuff with it. VERY much in dev mode, so fragile currently, please don't break it!,V
unstable ,v
and ,v
u,v
insecure ,v
],v
),v
(,v
http://howibecameawebdeveloper.com:8181/,v
162.243.139.66,v
reasons,v
of ,v
lots ,v
for ,v
practicing ,v
http://elliotec.com/floatin-in-space/,v
eventual ,v
projects,v
building,v
project ,v
Elixer,v
https://github.com/mgonto/restangular,v
http://spacemacs.org/,v
linkedin,v
LinkedIn,v
  - [LinkedIn](https://linkedin.com/in/elliotec),V
w,v
twitter,v
Twitter,v
  - [Twitter](https://twitter.com/elliotecweb),V
-,v
http://elliotec.com/how-i-got-a-job-in-web-development/,v
http://elliotec.com/writing-in-the-deseret-alphabet/,v
http://elliotec.com/teach-your-skills-for-fun-and-profit/,v
any ,v
http://www.cyfyifanchen.com/silly-side-projects/,v
y,v
springboarded ,v
better ,v
to ,v
like ,v
others,v
but ,v
fun,v
APIs ,v
ibuilt ,v
built APIs and services ,v
stack,v
the ,v
areas ,v
out,v
them ,v
find ,v
how ,v
knowing ,v
either ,v
comfortable ,v
most ,v
feel ,v
