<div class="payment-method">  <,v
8,v
*,v
 ,v
Merge Request !5170,v
quash ,v
squash ,v
pick ,v
pick 56aa6d2 projects: add container_registry_enabled to API docs,V
pick eb865bf update_service: remove trailing whitespace,V
pick 9e33ca1 docs: fix some typos,V
pick 5dcea40 gitlab-org/gitlab-ci-multi-runner#1478 Fixed phpunit command in the official doc didn't work. Curl command has to follow redirects now.,V
pick 9a08fa0 Wrong gitlab-shell version,V
pick d9c4943 Fix typo and explain the precedence of STDERR and STDOUT,V
pick 5369743 Make subnavigation a bit darker color,V
3bae69a Update ui_guide.md with button capitalize rule,V
git rebase --interactive HEAD~2,v
https://gitlab.com/elliotec/gitlab-ce,v
git@gitlab.com:elliotec/gitlab-ce.git,v
  },V
http://tobyho.com/2010/11/22/javascript-constructors-and/,v
https://bluejeans.com/9023901827/,v
what is going on?????,V
https://twitter.com/fasterthanlime/status/750030443882409984,v
Where to start about why I want to work for GitLab?Aside from it's aspects of creativity and problem solving, a big part of why I got into the software industry was because of the mobility and progressiveness associated with it. Sometime during my time initially learning Rails, I was reading as much as I could about DHH's philosophies, especially about business and productivity, and I read Rework by DHH and Jason Fried. I was totally floored by the fact that people are creating businesses like this, and decided that the ability to work remotely is one of the defining characteristics of the industry, and one of the greater advances of labor in modern times. My wife and I both come from international families and have relatives in several countries abroad and have long dreamed of being able to spend time with them and in our places of heritage, while still doing what we love and making a living all the same.Having already been in the industry at the time, but not yet having an opportunity to find such progressive companies, I've since kept my eye out for a company that stood out to me as one that I could feel comfortable entrenching myself in the culture and sticking around long enough to retire out of. But as it happens, most companies that I've spent time or been involved with are not as progressive as the idyllic model put in my head by Rework. My homeland of Utah has a slowly progressing but fairly conservative business culture and, while I have had a lot of success here with my career and network growth, I have struggled to find a niche in a company that I could consider permanent.I am an active participant on Hacker News and the other day saw Brittany's comment on "Who is Hiring July 2016." I had been following GitLab since the infamous "Dear Github" letter (https://github.com/dear-github/dear-github) and had been impressed with everything I saw. I immediately had interest, but I haven't been on the lookout for something new, and since I have been fairly content in my current position, and along with the fact that GitLab is Y Combinator-backed as well as an international remote company, I was a bit hesitant to apply and face certainly strong competition. But the more I read about the company, it's values, culture, mission, and strategy, the more I realized there is nothing to lose and even a chance at an interview for a company such as this would be worth at least whatever time and effort it takes to put in an application and cover letter, so here we are.Speaking of a chance at an interview, this is the first time I've seen a company with a reasonable technical interview that assesses by what the candidate would actually do on the job. I've heard of companies doing such things, but the vast majority of interviews I've had were whiteboarding and heavily theoretical tests that had little to nothing to do with the daily tasks. I must admit I'm a little intimidated by that type of interview since it's not what I'm used to, but I'm far more intrigued and eager because I feel I'm finally getting a chance at the progressive nature of the enigmatic employer that I've long been dreaming of.In my research on GitLab, I was poking through the team page when I noticed a few business development folks working in close proximity to my city. I've reached out to all of them and have lunch planned with Mitchell Wright a little later this week. I planned to wait until after that to apply, but figured I might as well get a head start and give him credit for referring me (which he certainly did via our email conversations).I've had an engineering and enrepreneurial mind all my life, and I'm beyond greatful that it has led me to the path of success and growth that I have been able to achieve. I feel an obligation to teach and mentor others following a similar path, and want to continue my own growth by working with people I know have similar ideas to me, and conflicting ones that I can learn from and adapt to and ultimately grow ourselves and each other. And I believe GitLab may be the place where that can happen.Thank you very much for your consideration,Mike,V
Konfekt/FastFold,v
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.mov,*.pdf,*.psd,*.aiset wildignore+=*.ppt,*.pptx,*.doc,*.docx,*.xls,*.xlsx" enable matchit plugin which ships with vim and enhances '%'runtime macros/matchit.vim,v
,V
",v
set directory=~/.vim/tmp//set backupdir=~/.vim/tmp//" undo files and persistant undosset undofileset history=1000set undodir=~/Dropbox/dotfiles/.vim/tmp/undo/set undolevels=1000set undoreload=10000,v
let g:tmuxline_powerline_separators = 0" writing mode on markdown filesautocmd bufread,bufnewfile *.md,*.markdown setlocal spellautocmd bufread,bufnewfile *.md,*.markdown setlocal wrapautocmd bufread,bufnewfile *.md,*.markdown call litecorrect#init()autocmd bufread,bufnewfile *.md,*.markdown call pencil#init({'wrap': 'soft'})let g:vim_markdown_frontmatter = 1let g:vim_markdown_folding_level = 6function! s:goyo_enter()  silent !tmux set status off  Goyo 100x90%  Limelightendfunfunction! s:goyo_leave()  silent !tmux set status on  Limelight!endfunautocmd! User GoyoEnter nested call <SID>goyo_enter()autocmd! User GoyoLeave nested call <SID>goyo_leave()" This is to generate ctags in a project for code definition followmap <Leader>rt :!ctags --extra=+f -R *<CR><CR>,v
let g:tmuxline_powerline_separators = 0" writing mode on markdown filesautocmd bufread,bufnewfile *.md,*.markdown setlocal spellautocmd bufread,bufnewfile *.md,*.markdown setlocal wrapautocmd bufread,bufnewfile *.md,*.markdown call litecorrect#init()autocmd bufread,bufnewfile *.md,*.markdown call pencil#init({'wrap': 'soft'})let g:vim_markdown_frontmatter = 1let g:vim_markdown_folding_level = 6function! s:goyo_enter()  silent !tmux set status off  Goyo 100x90%  Limelightendfunfunction! s:goyo_leave()  silent !tmux set status on  Limelight!endfunautocmd! User GoyoEnter nested call <SID>goyo_enter()autocmd! User GoyoLeave nested call <SID>goyo_leave()" This is to generate ctags in a project for code definition followmap <Leader>rt :!ctags --extra=+f -R *<CR><CR>,v
let g:user_emmet_expandabbr_key = '<c-y>',v
let g:user_emmet_expandabbr_key = '<c-y>',V
" Swap lines up and downnnoremap <C-j> :m .+1<CR>==nnoremap <C-k> :m .-2<CR>==inoremap <C-j> <Esc>:m .+1<CR>==giinoremap <C-k> <Esc>:m .-2<CR>==givnoremap <C-j> :m '>+1<CR>gv=gvvnoremap <C-k> :m '<-2<CR>gv=gv" Easy buffer switchnmap <leader>l :bnext<CR>nmap <leader>h :bprevious<CR>" kill scratch buffer after selection is madeautocmd CursorMovedI * if pumvisible() == 0|pclose|endifautocmd InsertLeave * if pumvisible() == 0|pclose|endif"Destroy distractionsnnoremap <silent> <leader>z :Goyo<cr>,v
" Keep encoding utf-8set encoding=utf-8set fileencoding=utf-8" Backspace kills end of line and moves to previousset backspace=indent,eol,start" Keep buffers in the background when abandonedset hidden" ignore lots of filesset wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.mov,*.pdf,*.psd,*.aiset wildignore+=*.ppt,*.pptx,*.doc,*.docx,*.xls,*.xlsx" enable matchit plugin which ships with vim and enhances '%'runtime macros/matchit.vim" Show me what I'll doset showcmd" Enble autoread, some weird magic here that works well.set autoreadaugroup checktime    au!    if !has("gui_running")        autocmd BufEnter        * silent! checktime        autocmd CursorHold      * silent! checktime        autocmd CursorHoldI     * silent! checktime        autocmd CursorMoved     * silent! checktime        autocmd CursorMovedI    * silent! checktime        autocmd FocusGained     * silent! checktime    endifaugroup END" true term colors"set termguicolors" Use unix line endingsset fileformat=unix" always show status barset laststatus=2" only show status in status barset noshowmode" autoindent based on line aboveset autoindent" use spaces instead of tabs (noexpandtab for opposite)set expandtab" for makefilesautocmd FileType make set noexpandtab" tabs are 2 spaces while reading and insert modeset shiftwidth=2set softtabstop=2" size of a hard tabstopset tabstop=4" smarter indent for C-like languagesset smartindent" show tabs with dashes and trailing spaces with dotsset listchars=tab:--,trail:Â·set list" keep cursor visible within 8 lines while scrollingset scrolloff=8" Swaps and backups go in tmpset directory=~/.vim/tmp//set backupdir=~/.vim/tmp//" undo files and persistant undosset undofileset history=1000set undodir=~/Dropbox/dotfiles/.vim/tmp/undo/set undolevels=1000set undoreload=10000" Specify syntax on certain filetypesautocmd BufNewFile,BufRead *.md,*.markdown setlocal ft=markdownautocmd BufNewFile,BufRead *.less setlocal ft=lessautocmd BufNewFile,BufRead *.scss setlocal ft=scss" autocomplete words with spell checkset complete+=kspell" Remove trailing whitespace on savefunction! <SID>StripTrailingWhitespaces()    let l = line(".")    let c = col(".")    %s/\s\+$//e    call cursor(l, c)endfunautocmd BufWritePre * :call <SID>StripTrailingWhitespaces()" Set current colorscheme (from .vim/colors/)colorscheme molokai" Set space as map leaderlet mapleader = "\<Space>"" map jj to escinoremap jj <ESC>" clipboard bindingsset clipboard=unnamed" better ways to get to beginning and end of linennoremap H 0nnoremap L $" expand region visual by repeating v rather than +vmap v <Plug>(expand_region_expand)vmap <C-v> <Plug>(expand_region_shrink)" map ,ev to edit vimrcnnoremap <leader>ev :vsp $MYVIMRC<CR>" save with <leader>wnnoremap <leader>w :w<CR>" set vim-over command to leader fnnoremap <leader>f :OverCommandLine<CR>" toggle nerdtree with ctrl-omap <C-o> :NERDTreeToggle %:p:h<CR>" tab and shift-tab do proper thingvmap <Tab> >gvvmap <S-Tab> <gv" Make Y behave like other Capitals (C, D, etc.)noremap Y y$" rainbow parens always onau VimEnter * RainbowParenthesesToggleau Syntax * RainbowParenthesesLoadRoundau Syntax * RainbowParenthesesLoadSquareau Syntax * RainbowParenthesesLoadBraces" dictionary pathset dictionary="/usr/dict/words"" lightline settingslet g:lightline = {      \ 'colorscheme': 'wombat',      \ 'active': {      \   'left': [ [ 'mode', 'paste' ],      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],      \  'right': [ [ 'lineinfo' ],      \             [ 'percent' ],      \             [ 'filetype' ] ]      \ },      \ 'component': {      \   'readonly': '%{&readonly?"x":""}',      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'      \ },      \ 'component_visible_condition': {      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'      \ },      \ 'separator': { 'left': '', 'right': '' },      \ 'subseparator': { 'left': '|', 'right': '|' }      \ },V
let g:lightline = {      \ 'colorscheme': 'wombat',      \ 'active': {      \   'left': [ [ 'mode', 'paste' ],      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],      \  'right': [ [ 'lineinfo' ],      \             [ 'percent' ],      \             [ 'filetype' ] ]      \ },      \ 'component': {      \   'readonly': '%{&readonly?"x":""}',      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'      \ },      \ 'component_visible_condition': {      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'      \ },      \ 'separator': { 'left': '', 'right': '' },      \ 'subseparator': { 'left': '|', 'right': '|' }      \ }",v
let g:lightline = {      \ 'colorscheme': 'wombat',      \ 'active': {      \   'left': [ [ 'mode', 'paste' ],      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],      \  'right': [ [ 'lineinfo' ],      \             [ 'percent' ],      \             [ 'filetype' ] ]      \ },      \ 'component': {      \   'readonly': '%{&readonly?"x":""}',      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'      \ },      \ 'component_visible_condition': {      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'      \ },      \ 'separator': { 'left': '', 'right': '' },      \ 'subseparator': { 'left': '|', 'right': '|' }      \ }" Swap lines up and downnnoremap <C-j> :m .+1<CR>==nnoremap <C-k> :m .-2<CR>==inoremap <C-j> <Esc>:m .+1<CR>==giinoremap <C-k> <Esc>:m .-2<CR>==givnoremap <C-j> :m '>+1<CR>gv=gvvnoremap <C-k> :m '<-2<CR>gv=gv",v
	Â·,v
" Set current colorscheme (from .vim/colors/)colorscheme molokai" Set space as map leaderlet mapleader = "\<Space>"" map jj to escinoremap jj <ESC>,v
curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim,v
d,v
why ,v
are ,v
my ,v
colors ,v
weir,v
    - [Beautilist](http://beautilist.herokuapp.com),V
want ,v
!,v
t,v
i,v
k,v
a,v
e,v
r,v
b,v
',v
n,v
o,v
s,v
l,v
p,v
,,v
fragile ,v
so ,v
    - [Horizontal](http://howibecameawebdeveloper.com:8181) -- horizon/vue realtime chat, want to do other cool stuff with it. VERY much in dev mode, so fragile currently, please don't break it!,V
unstable ,v
and ,v
u,v
insecure ,v
],v
),v
(,v
http://howibecameawebdeveloper.com:8181/,v
162.243.139.66,v
reasons,v
of ,v
lots ,v
for ,v
practicing ,v
http://elliotec.com/floatin-in-space/,v
eventual ,v
projects,v
building,v
project ,v
Elixer,v
https://github.com/mgonto/restangular,v
http://spacemacs.org/,v
linkedin,v
LinkedIn,v
  - [LinkedIn](https://linkedin.com/in/elliotec),V
w,v
twitter,v
Twitter,v
  - [Twitter](https://twitter.com/elliotecweb),V
-,v
http://elliotec.com/how-i-got-a-job-in-web-development/,v
http://elliotec.com/writing-in-the-deseret-alphabet/,v
http://elliotec.com/teach-your-skills-for-fun-and-profit/,v
